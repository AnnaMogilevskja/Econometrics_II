#print(samplesize)
sampsize1 <- cbind(n_1, p1_new)
sampsize2 <- cbind(n_2, p2_new)
sampsize1 <- sampsize1[c(-1,-99), ]
sampsize2 <- sampsize2[c(-1,-100), ]
plot(sampsize1$p1_new, sampsize1$n_1)
p1_new <- seq.int(from = 0, to = 1, by=0.01)
p2_new <- seq.int(from = 0, to = 1, by=0.01)
n_1 <- list()
n_2 <- list()
for (i in 1:length(p1_new)){
n_1[i] = ((t_alpha - t_q)/MDE_fruit)^2 * (sigma^2)/(p1_new[i]*(1-p1_new[i]))
}
for (i in 1:length(p2_new)){
n_2[i] = ((t_alpha - t_q)/MDE_candy)^2 * (sigma^2)/(p2_new[i]*(1-p2_new[i]))
}
#samplesize = max(n_1,n_2)
#print(samplesize)
sampsize1 <- cbind(n_1, p1_new)
sampsize2 <- cbind(n_2, p2_new)
sampsize1 <- sampsize1[-1, ]
sampsize1 <- sampsize1[-99, ]
sampsize2 <- sampsize2[c(-1,-100), ]
plot(sampsize1$p1_new, sampsize1$n_1)
p1_new <- seq.int(from = 0, to = 1, by=0.01)
p2_new <- seq.int(from = 0, to = 1, by=0.01)
n_1 <- list()
n_2 <- list()
for (i in 1:length(p1_new)){
n_1[i] = ((t_alpha - t_q)/MDE_fruit)^2 * (sigma^2)/(p1_new[i]*(1-p1_new[i]))
}
for (i in 1:length(p2_new)){
n_2[i] = ((t_alpha - t_q)/MDE_candy)^2 * (sigma^2)/(p2_new[i]*(1-p2_new[i]))
}
#samplesize = max(n_1,n_2)
#print(samplesize)
sampsize1 <- cbind(n_1, p1_new)
sampsize2 <- cbind(n_2, p2_new)
sampsize1 <- sampsize1[c(-1,-101), ]
p1_new <- seq.int(from = 0, to = 1, by=0.01)
p2_new <- seq.int(from = 0, to = 1, by=0.01)
n_1 <- list()
n_2 <- list()
for (i in 1:length(p1_new)){
n_1[i] = ((t_alpha - t_q)/MDE_fruit)^2 * (sigma^2)/(p1_new[i]*(1-p1_new[i]))
}
for (i in 1:length(p2_new)){
n_2[i] = ((t_alpha - t_q)/MDE_candy)^2 * (sigma^2)/(p2_new[i]*(1-p2_new[i]))
}
#samplesize = max(n_1,n_2)
#print(samplesize)
sampsize1 <- cbind(n_1, p1_new)
sampsize2 <- cbind(n_2, p2_new)
sampsize1 <- sampsize1[c(-1,-101), ]
sampsize2 <- sampsize2[c(-1,-101), ]
plot(sampsize1$p1_new, sampsize1$n_1)
plot(sampsize1$p1_new)
str(sampsize1)
View(data)
sampsize1 = as.numeric(sampsize1)
p1_new <- seq.int(from = 0, to = 1, by=0.01)
p2_new <- seq.int(from = 0, to = 1, by=0.01)
n_1 <- list()
n_2 <- list()
for (i in 1:length(p1_new)){
n_1[i] = ((t_alpha - t_q)/MDE_fruit)^2 * (sigma^2)/(p1_new[i]*(1-p1_new[i]))
}
for (i in 1:length(p2_new)){
n_2[i] = ((t_alpha - t_q)/MDE_candy)^2 * (sigma^2)/(p2_new[i]*(1-p2_new[i]))
}
#samplesize = max(n_1,n_2)
#print(samplesize)
sampsize1 <- cbind(n_1, p1_new)
sampsize2 <- cbind(n_2, p2_new)
sampsize1 <- sampsize1[c(-1,-101), ]
sampsize2 <- sampsize2[c(-1,-101), ]
sampsize1$n_1 = as.numeric(sampsize1$n_1)
plot(sampsize1$p1_new)
fuckmylife = as.numeric(sampsize1$n_1)
fuckmylife <- as.numeric(sampsize1$n_1)
sampsize1 <- round(sampsize$n_1, digits = 2)
sampsize1 <- round(sampsize1$n_1, digits = 2)
p1_new <- seq.int(from = 0, to = 1, by=0.01)
p2_new <- seq.int(from = 0, to = 1, by=0.01)
n_1 <- list()
n_2 <- list()
for (i in 1:length(p1_new)){
n_1[i] = ((t_alpha - t_q)/MDE_fruit)^2 * (sigma^2)/(p1_new[i]*(1-p1_new[i]))
}
for (i in 1:length(p2_new)){
n_2[i] = ((t_alpha - t_q)/MDE_candy)^2 * (sigma^2)/(p2_new[i]*(1-p2_new[i]))
}
#samplesize = max(n_1,n_2)
#print(samplesize)
sampsize1 <- cbind(n_1, p1_new)
sampsize2 <- cbind(n_2, p2_new)
sampsize1 <- sampsize1[c(-1,-101), ]
sampsize2 <- sampsize2[c(-1,-101), ]
sampsize1$n_1 <- round(sampsize1$n_1, digits = 2)
str(sampsize1)
sampsize1 <- do.call(rbind,mapply(cbind, p1_new, n_1))
sampsize1 <- as.data.frame(sampsize1, stringsAsFactors = FALSE)
sampsize1[,2] <- as.numeric(sampsize1[,2])
p1_new <- list(seq.int(from = 0, to = 1, by=0.01))
p2_new <- list(seq.int(from = 0, to = 1, by=0.01))
View(p1_new)
View(p1_new)
sampsize1 <- do.call(rbind,mapply(cbind, p1_new, n_1))
sampsize1 <- as.data.frame(sampsize1, stringsAsFactors = FALSE)
sampsize1[,2] <- as.numeric(sampsize1[,2])
p1_new <- list()
p1_new <- seq.int(from = 0, to = 1, by=0.01)
p1_new <- list()
p1_new <- seq.int(from = 0, to = 1, by=0.01)
p2_new <- list()
p2_new <- seq.int(from = 0, to = 1, by=0.01)
n_1 <- list()
n_2 <- list()
for (i in 1:length(p1_new)){
n_1[i] = ((t_alpha - t_q)/MDE_fruit)^2 * (sigma^2)/(p1_new[i]*(1-p1_new[i]))
}
for (i in 1:length(p2_new)){
n_2[i] = ((t_alpha - t_q)/MDE_candy)^2 * (sigma^2)/(p2_new[i]*(1-p2_new[i]))
}
sampsize1 <- do.call(rbind,mapply(cbind, p1_new, n_1))
sampsize1 <- as.data.frame(sampsize1, stringsAsFactors = FALSE)
sampsize1[,2] <- as.numeric(sampsize1[,2])
p1_new <- as.list(seq.int(from = 0, to = 1, by=0.01))
View(p1_new)
p1_new <- as.list(seq.int(from = 0, to = 1, by=0.01))
p2_new <- as.list(seq.int(from = 0, to = 1, by=0.01))
n_1 <- list()
n_2 <- list()
for (i in 1:length(p1_new)){
n_1[i] = ((t_alpha - t_q)/MDE_fruit)^2 * (sigma^2)/(p1_new[i]*(1-p1_new[i]))
}
for (i in 1:length(p2_new)){
n_2[i] = ((t_alpha - t_q)/MDE_candy)^2 * (sigma^2)/(p2_new[i]*(1-p2_new[i]))
}
p1_new <- seq.int(from = 0, to = 1, by=0.01)
p2_new <- seq.int(from = 0, to = 1, by=0.01)
n_1 <- list()
n_2 <- list()
for (i in 1:length(p1_new)){
n_1[i] = ((t_alpha - t_q)/MDE_fruit)^2 * (sigma^2)/(p1_new[i]*(1-p1_new[i]))
}
for (i in 1:length(p2_new)){
n_2[i] = ((t_alpha - t_q)/MDE_candy)^2 * (sigma^2)/(p2_new[i]*(1-p2_new[i]))
}
p1_new <- as.list(p1_new)
sampsize1 <- do.call(rbind,mapply(cbind, p1_new, n_1))
sampsize1 <- as.data.frame(sampsize1, stringsAsFactors = FALSE)
sampsize1[,2] <- as.numeric(sampsize1[,2])
sampsize1 <- append(p1_new, n_1)
sampsize1 = data.frame(unlist(p1_new),unlist(n_1))
View(sampsize1)
names(sampsize1) <- c("p1", "n1")
sampsize1 <- sampsize1[c(-1,-101), ]
sampsize2 <- sampsize2[c(-1,-101), ]
str(sampsize)
str(sampsize1)
plot(sampsize1$p1_new)
sampsize1 <- as.data.frame(sampsize1, stringsAsFactors = FALSE)
sampsize1[,2] <- as.numeric(sampsize1[,2])
plot(sampsize1$p1,sampsize1$n1)
p1_new <- seq.int(from = 0, to = 1, by=0.01)
p2_new <- seq.int(from = 0, to = 1, by=0.01)
n_1 <- list()
n_2 <- list()
for (i in 1:length(p1_new)){
n_1[i] = ((t_alpha - t_q)/MDE_fruit)^2 * (sigma^2)/(p1_new[i]*(1-p1_new[i]))
}
for (i in 1:length(p2_new)){
n_2[i] = ((t_alpha - t_q)/MDE_candy)^2 * (sigma^2)/(p2_new[i]*(1-p2_new[i]))
}
#samplesize = max(n_1,n_2)
#print(samplesize)
p1_new <- as.list(p1_new)
sampsize1 = data.frame(unlist(p1_new),unlist(n_1))
names(sampsize1) <- c("p1", "n1")
#sampsize1 <- as.data.frame(sampsize1, stringsAsFactors = FALSE)
sampsize1[,2] <- as.numeric(sampsize1[,2])
sampsize1 <- sampsize1[c(-1,-101), ]
p2_new <- as.list(p2_new)
sampsize2 = data.frame(unlist(p2_new),unlist(n_2))
names(sampsize2) <- c("p2", "n2")
#sampsize2 <- as.data.frame(sampsize2, stringsAsFactors = FALSE)
sampsize2[,2] <- as.numeric(sampsize2[,2])
sampsize2 <- sampsize2[c(-1,-101), ]
plot(sampsize1$p1,sampsize1$n1, type="l")
plot(sampsize2$p2,sampsize2$n2, type="l")
plot(sampsize1$p1,sampsize1$n1, type="l")
plot(sampsize2$p2,sampsize2$n2, type="l")
p1_new <- seq.int(from = 0, to = 1, by=0.01)
p2_new <- seq.int(from = 0, to = 1, by=0.01)
n_1 <- list()
n_2 <- list()
for (i in 1:length(p1_new)){
n_1[i] = ((t_alpha - t_q)/MDE_fruit)^2 * (sigma^2)/(p1_new[i]*(1-p1_new[i]))
}
for (i in 1:length(p2_new)){
n_2[i] = ((t_alpha - t_q)/MDE_candy)^2 * (sigma^2)/(p2_new[i]*(1-p2_new[i]))
}
#samplesize = max(n_1,n_2)
#print(samplesize)
p1_new <- as.list(p1_new)
sampsize1 = data.frame(unlist(p1_new),unlist(n_1))
names(sampsize1) <- c("p1", "n1")
#sampsize1 <- as.data.frame(sampsize1, stringsAsFactors = FALSE)
sampsize1[,2] <- as.numeric(sampsize1[,2])
sampsize1 <- sampsize1[c(-1,-101), ]
p2_new <- as.list(p2_new)
sampsize2 = data.frame(unlist(p2_new),unlist(n_2))
names(sampsize2) <- c("p2", "n2")
#sampsize2 <- as.data.frame(sampsize2, stringsAsFactors = FALSE)
sampsize2[,2] <- as.numeric(sampsize2[,2])
sampsize2 <- sampsize2[c(-1,-101), ]
plot(sampsize1$p1,sampsize1$n1, type="l")
abline(h=samplesize, col="red")
plot(sampsize2$p2,sampsize2$n2, type="l")
abline(h=samplesize, col="red")
plot(sampsize1$p1,sampsize1$n1, type="l")
abline(h=samplesize, col="red")
plot(sampsize2$p2,sampsize2$n2, type="l")
abline(h=samplesize, col="red")
model1_robust
linearHypothesis(model1_robust, "(Intercept)= 0.167")
install.packages("car")
knitr::opts_chunk$set(echo = TRUE)
library(RCT)
library(dplyr)
library(magrittr)
library(lmtest)
library(stargazer)
library(lmtest)
library(sandwich)
library(car)
linearHypothesis(model1_robust, "(Intercept)= 0.167")
install.packages("fabricatr")
knitr::opts_chunk$set(echo = TRUE)
library(RCT)
library(dplyr)
library(magrittr)
library(lmtest)
library(stargazer)
library(lmtest)
library(sandwich)
library(fabricatr)
lh_robust(model1, data = data, linear_hypothesis = "(Intercept) = (1/6)")
knitr::opts_chunk$set(echo = TRUE)
library(RCT)
library(dplyr)
library(magrittr)
library(lmtest)
library(stargazer)
library(lmtest)
library(sandwich)
library(fabricatr)
lh_robust(model1, data = data, linear_hypothesis = "(Intercept) = (1/6)")
install.packages("estimatr")
knitr::opts_chunk$set(echo = TRUE)
library(RCT)
library(dplyr)
library(magrittr)
library(lmtest)
library(stargazer)
library(lmtest)
library(sandwich)
library(estimatr)
lh_robust(model1, data = data, linear_hypothesis = "(Intercept) = (1/6)")
lh_robust(correct ~ treatment_fruit + treatment_candy, data = data, linear_hypothesis = "(Intercept) = (1/6)")
lh_robust(correct ~ treatment_fruit + treatment_candy, data = data, linear_hypothesis = "(Intercept) = 0.167")
lh_robust(correct ~ treatment_fruit + treatment_candy, data = data, linear_hypothesis = "treatment_fruit = 0")
lh_robust(correct ~ treatment_fruit + treatment_candy, data = data, linear_hypothesis = "treatment_candy = 0")
View(fraction_nothing)
View(fraction_nothing)
length(data$treatment[!data$treatment  == 0])
# Fruit
k=4
q=0.8
alpha=0.05
n <- length(data$treatment)
m <- length(data$treatment[!data$treatment  == 0])
t_alpha <- qt(p=alpha/2, df=n-k, lower.tail=FALSE)
t_q <- qt(p=q, df=n-k, lower.tail=FALSE)
p = m/n
#Residual Standard error (Like Standard Deviation)
k=length(model4$coefficients)-1 #Subtract one to ignore intercept
SSE=sum(model4$residuals**2)
t=length(model4$residuals)
sigma = sqrt(SSE/(t-(1+k))) #Residual Standard Error
MDE = (t_alpha - t_q)*sqrt(1/(p*(1-p)))*sqrt(sigma^2/n)
MDE
MDE_target = 0.25*(1 - (1/6))
samplesize = ((t_alpha - t_q)/MDE_target)^2*((sigma^2)/(p*(1-p)))
print(samplesize)
MDE_target
p1 <- seq.int(from = 0, to = 1, by=0.01)
n1 <- list()
for (i in 1:length(p1)){
n1[i] = ((t_alpha - t_q)/MDE)^2 * (sigma^2)/(p1[i]*(1-p1[i]))
}
p1 <- as.list(p1)
sampsize = data.frame(unlist(p1),unlist(n1))
names(sampsize) <- c("p1", "n1")
sampsize[,2] <- as.numeric(sampsize[,2])
sampsize <- sampsize[c(-1,-101), ]
plot(sampsize$p1,sampsize$n1, type="l")
abline(h=samplesize, col="red")
p2 <- 0.5
new_size = ((t_alpha - t_q)/MDE)^2 * (sigma^2)/(p2*(1-p2))
new_size
p1 <- seq.int(from = 0, to = 1, by=0.01)
n1 <- list()
for (i in 1:length(p1)){
n1[i] = ((t_alpha - t_q)/MDE)^2 * (sigma^2)/(p1[i]*(1-p1[i]))
}
p1 <- as.list(p1)
sampsize = data.frame(unlist(p1),unlist(n1))
names(sampsize) <- c("p1", "n1")
sampsize[,2] <- as.numeric(sampsize[,2])
sampsize <- sampsize[c(-1,-101), ]
plot(sampsize$p1,sampsize$n1, type="l")
abline(h=length(data), col="red")
p1 <- seq.int(from = 0, to = 1, by=0.01)
n1 <- list()
for (i in 1:length(p1)){
n1[i] = ((t_alpha - t_q)/MDE)^2 * (sigma^2)/(p1[i]*(1-p1[i]))
}
p1 <- as.list(p1)
sampsize = data.frame(unlist(p1),unlist(n1))
names(sampsize) <- c("p1", "n1")
sampsize[,2] <- as.numeric(sampsize[,2])
sampsize <- sampsize[c(-1,-101), ]
plot(sampsize$p1,sampsize$n1, type="l")
abline(h=length(data$treatment), col="red")
knitr::opts_chunk$set(echo = TRUE)
library(RCT)
library(dplyr)
library(magrittr)
library(lmtest)
library(stargazer)
library(lmtest)
library(sandwich)
library(estimatr)
(100*9+75*13+25*10)/200 - (7*100+8*25+9*75)/200
balance <- balance_table(data[, !names(data) %in% "id"], "treatment")
0.5*2+0.25*5+0.25*1
(100*9+ 75*13 + 25*10)/200 - (100*7 + 75*8 + 25*9)/200
knitr::opts_chunk$set(echo = TRUE)
library(RCT)
library(dplyr)
library(magrittr)
library(lmtest)
library(stargazer)
library(lmtest)
library(sandwich)
library(estimatr)
# Load data
data <- read.csv("assignment3.csv")
data$important[data$important == "sport"] <- 0
data$important[data$important == "school"] <- 1
data$better[data$better == "Math"] <- 1
data$better[data$better == "Language"] <- 0
data$preferredhand[data$preferredhand == "Left"] <- 1
data$preferredhand[data$preferredhand == "Right"] <- 0
data$treatment [data$treatment  == "Nothing"] <- 0
data$treatment [data$treatment  == "Candybar"] <- 2
data$treatment [data$treatment  == "Fruit"] <- 1
data$important[data$important == ""] <- NA
data %<>%
mutate_each(funs(if(is.character(.)) as.integer(.) else .))
knitr::opts_chunk$set(echo = TRUE)
library(RCT)
library(dplyr)
library(magrittr)
library(lmtest)
library(stargazer)
library(lmtest)
library(sandwich)
library(estimatr)
# Load data
data <- read.csv("assignment3.csv")
data$important[data$important == "sport"] <- 0
data$important[data$important == "school"] <- 1
data$better[data$better == "Math"] <- 1
data$better[data$better == "Language"] <- 0
data$preferredhand[data$preferredhand == "Left"] <- 1
data$preferredhand[data$preferredhand == "Right"] <- 0
data$treatment [data$treatment  == "Nothing"] <- 0
data$treatment [data$treatment  == "Candybar"] <- 2
data$treatment [data$treatment  == "Fruit"] <- 1
data$important[data$important == ""] <- NA
data %<>%
mutate_each(funs(if(is.character(.)) as.integer(.) else .))
balance <- balance_table(data[, !names(data) %in% "id"], "treatment")
balance
fraction_nothing <- (balance[2, 2]-(1/6))/(1- (1/6))
fraction_fruit <- (balance[2, 3]-(1/6))/(1- (1/6))
fraction_candybar <-(balance[2, 4]-(1/6))/(1- (1/6))
fractions <- cbind(fraction_nothing, fraction_fruit, fraction_candybar)
fractions
data$treatment_fruit [data$treatment  == 0] <- 0
data$treatment_fruit [data$treatment  == 2] <- 0
data$treatment_fruit [data$treatment  == 1] <- 1
data$treatment_candy [data$treatment  == 0] <- 0
data$treatment_candy [data$treatment  == 2] <- 1
data$treatment_candy [data$treatment  == 1] <- 0
model1 <- lm(correct ~ treatment_fruit + treatment_candy, data = data)
model1_robust <- coeftest(model1, vcov = vcovHC, type = "HC1")
lh_robust(correct ~ treatment_fruit + treatment_candy, data = data, linear_hypothesis =
"(Intercept) = 0.167")
t.test(subset(data, treatment == 0)$correct, y = NULL,
alternative = c("greater"),
mu = 1/6, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
t.test(subset(data, treatment == 1)$correct, y = NULL,
alternative = c("greater"),
mu = 1/6, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
t.test(subset(data, treatment == 2)$correct, y = NULL,
alternative = c("greater"),
mu = 1/6, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
lh_robust(correct ~ treatment_fruit + treatment_candy + gender + grade +  important + better + preferredhand + siblings + youngestchild + oftenexpelled, data = data, linear_hypothesis =
"(Intercept) = 0.167")
lh_robust(correct ~ treatment_fruit + treatment_candy + grade +  important+ siblings, data = data, linear_hypothesis =
"(Intercept) = 0.167")
lh_robust(correct ~ treatment_fruit + treatment_candy + grade +  important, data = data, linear_hypothesis =
"(Intercept) = 0.167")
lh_robust(treatment_fruit  ~treatment_candy grade, data = data, linear_hypothesis =
lh_robust(treatment_fruit  ~ treatment_candy + grade, data = data, linear_hypothesis =
"(Intercept) = 0.167")
lh_robust(correct ~ treatment_fruit + treatment_candy + grade, data = data, linear_hypothesis =
"(Intercept) = 0.167")
lh_robust(correct ~ treatment_fruit + treatment_candy + important, data = data, linear_hypothesis =
"(Intercept) = 0.167")
# Fruit
k=4
q=0.8
alpha=0.05
n <- length(data$treatment)
m <- length(data$treatment[!data$treatment  == 0])
t_alpha <- qt(p=alpha/2, df=n-k, lower.tail=FALSE)
t_q <- qt(p=q, df=n-k, lower.tail=FALSE)
p = m/n
#Residual Standard error (Like Standard Deviation)
k=length(model4$coefficients)-1 #Subtract one to ignore intercept
model4 <- lh_robust(correct ~ treatment_fruit + treatment_candy + gender, data = data, linear_hypothesis =
"(Intercept) = 0.167")
View(model4)
# Fruit
k=4
q=0.8
alpha=0.05
n <- length(data$treatment)
m <- length(data$treatment[!data$treatment  == 0])
t_alpha <- qt(p=alpha/2, df=n-k, lower.tail=FALSE)
t_q <- qt(p=q, df=n-k, lower.tail=FALSE)
p = m/n
#Residual Standard error (Like Standard Deviation)
k=length(model4$coefficients)-1 #Subtract one to ignore intercept
SSE=sum(model4$residuals**2)
t=length(model4$residuals)
sigma = sqrt(SSE/(t-(1+k))) #Residual Standard Error
MDE = (t_alpha - t_q)*sqrt(1/(p*(1-p)))*sqrt(sigma^2/n)
MDE
model4 <- lm(correct ~ treatment_fruit + treatment_candy + gender, data = data)
# Fruit
k=4
q=0.8
alpha=0.05
n <- length(data$treatment)
m <- length(data$treatment[!data$treatment  == 0])
t_alpha <- qt(p=alpha/2, df=n-k, lower.tail=FALSE)
t_q <- qt(p=q, df=n-k, lower.tail=FALSE)
p = m/n
#Residual Standard error (Like Standard Deviation)
k=length(model4$coefficients)-1 #Subtract one to ignore intercept
SSE=sum(model4$residuals**2)
t=length(model4$residuals)
sigma = sqrt(SSE/(t-(1+k))) #Residual Standard Error
MDE = (t_alpha - t_q)*sqrt(1/(p*(1-p)))*sqrt(sigma^2/n)
MDE
MDE_target = 0.25*(1 - (1/6))
samplesize = ((t_alpha - t_q)/MDE_target)^2*((sigma^2)/(p*(1-p)))
print(samplesize)
model4 <- lm(correct ~ treatment_fruit + treatment_candy + gender, data = data)
model4_robust <- coeftest(model1, vcov = vcovHC, type = "HC1")
model4_robust
lh_robust(correct ~ treatment_fruit + treatment_candy + gender, data = data, linear_hypothesis =
"(Intercept) = 0.167")
model4 <- lm(correct ~ treatment_fruit + treatment_candy + gender, data = data)
model4_robust <- coeftest(model4, vcov = vcovHC, type = "HC1")
model4_robust
lh_robust(correct ~ treatment_fruit + treatment_candy + gender, data = data, linear_hypothesis =
"(Intercept) = 0.167")
p2 <- 0.5
new_size = ((t_alpha - t_q)/MDE)^2 * (sigma^2)/(p2*(1-p2))
new_size
p1 <- seq.int(from = 0, to = 1, by=0.01)
n1 <- list()
for (i in 1:length(p1)){
n1[i] = ((t_alpha - t_q)/MDE)^2 * (sigma^2)/(p1[i]*(1-p1[i]))
}
p1 <- as.list(p1)
sampsize = data.frame(unlist(p1),unlist(n1))
names(sampsize) <- c("p1", "n1")
sampsize[,2] <- as.numeric(sampsize[,2])
sampsize <- sampsize[c(-1,-101), ]
plot(sampsize$p1,sampsize$n1, type="l")
abline(h=length(data$treatment), col="red")
