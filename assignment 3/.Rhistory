knitr::opts_chunk$set(echo = TRUE)
library(RCT)
library(dplyr)
library(magrittr)
library(lmtest)
library(stargazer)
library(lmtest)
library(sandwich)
library(powerMediation)
# Load data
data <- read.csv("assignment3.csv")
data$important[data$important == "sport"] <- 0
data$important[data$important == "school"] <- 1
data$better[data$better == "Math"] <- 1
data$better[data$better == "Language"] <- 0
data$preferredhand[data$preferredhand == "Left"] <- 1
data$preferredhand[data$preferredhand == "Right"] <- 0
knitr::opts_chunk$set(echo = TRUE)
library(RCT)
library(dplyr)
library(magrittr)
library(lmtest)
library(stargazer)
library(lmtest)
library(sandwich)
data$treatment [data$treatment  == "Nothing"] <- 0
data$treatment [data$treatment  == "Candybar"] <- 2
data$treatment [data$treatment  == "Fruit"] <- 1
data$important[data$important == ""] <- NA
data %<>%
mutate_each(funs(if(is.character(.)) as.integer(.) else .))
View(data)
balance <- balance_table(data[, !names(data) %in% "id"], "treatment")
balance
fraction_nothing <- (balance[2, 2]-(1/6))/(1- (1/6))
fraction_fruit <- (balance[2, 3]-(1/6))/(1- (1/6))
fraction_candybar <-(balance[2, 4]-(1/6))/(1- (1/6))
fractions <- cbind(fraction_nothing, fraction_fruit, fraction_candybar)
fractions
data$treatment_fruit [data$treatment  == 0] <- 0
data$treatment_fruit [data$treatment  == 2] <- 0
data$treatment_fruit [data$treatment  == 1] <- 1
data$treatment_candy [data$treatment  == 0] <- 0
data$treatment_candy [data$treatment  == 2] <- 1
data$treatment_candy [data$treatment  == 1] <- 0
model1 <- lm(correct ~ treatment_fruit + treatment_candy, data = data)
model1_robust <- coeftest(model1, vcov = vcovHC, type = "HC1")
model1_robust
t.test(subset(data, treatment == 0)$correct, y = NULL,
alternative = c("greater"),
mu = 1/6, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
t.test(subset(data, treatment == 1)$correct, y = NULL,
alternative = c("greater"),
mu = 1/6, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
t.test(subset(data, treatment == 2)$correct, y = NULL,
alternative = c("greater"),
mu = 1/6, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
model5 <- lm(correct ~ treatment_fruit + treatment_candy + gender + grade , data = data)
model5_robust <- coeftest(model5, vcov = vcovHC, type = "HC1")
model5_robust
model5 <- lm(correct ~ treatment_fruit + treatment_candy + gender + grade , data = data)
model5_robust <- coeftest(model5, vcov = vcovHC, type = "HC1")
model5_robust
model4 <- lm(correct ~ treatment_fruit + treatment_candy + gender, data = data)
model4_robust <- coeftest(model4, vcov = vcovHC, type = "HC1")
model4_robust
model5 <- lm(correct ~ treatment_fruit + treatment_candy + gender + important , data = data)
model5_robust <- coeftest(model5, vcov = vcovHC, type = "HC1")
model5_robust
model5 <- lm(correct ~ treatment_fruit + treatment_candy + gender + better , data = data)
model5_robust <- coeftest(model5, vcov = vcovHC, type = "HC1")
model5_robust
model5 <- lm(correct ~ treatment_fruit + treatment_candy + gender + preferredhand , data = data)
model5_robust <- coeftest(model5, vcov = vcovHC, type = "HC1")
model5_robust
model5 <- lm(correct ~ treatment_fruit + treatment_candy + gender + siblings , data = data)
model5_robust <- coeftest(model5, vcov = vcovHC, type = "HC1")
model5_robust
model5 <- lm(correct ~ treatment_fruit + treatment_candy + gender + youngestchild , data = data)
model5_robust <- coeftest(model5, vcov = vcovHC, type = "HC1")
model5_robust
model5 <- lm(correct ~ treatment_fruit + treatment_candy + gender + oftenexpelled, data = data)
model5_robust <- coeftest(model5, vcov = vcovHC, type = "HC1")
model5_robust
model4_robust
model5 <- lm(correct ~ treatment_fruit + treatment_candy + gender*treatment_fruit + gender*treatment_candy, data = data)
model5_robust <- coeftest(model5, vcov = vcovHC, type = "HC1")
model5_robust
# Fruit
k=4 # do we need to include the intercept?
q=0.8
alpha=0.05
n <- length(data$treatment)
n1 <- length(data$treatment[data$treatment  == 1])
t_alpha <- qt(p=alpha/2, df=n-k, lower.tail=FALSE)
t_q <- qt(p=q, df=n-k, lower.tail=TRUE) # denk nochmal drÃ¼ber nach
p1 = n1/n
#Residual Standard error (Like Standard Deviation)
k=length(model4$coefficients)-1 #Subtract one to ignore intercept
SSE=sum(model4$residuals**2)
m=length(model4$residuals)
sigma = sqrt(SSE/(m-(1+k))) #Residual Standard Error
MDE_fruit = (t_alpha - t_q)*sqrt(1/(p1*(1-p1)))*sqrt(sigma^2/n)
# Candybar
n2 <- length(data$treatment[data$treatment  == 2])
p2 = n2/n
MDE_candy = (t_alpha - t_q)*sqrt(1/(p2*(1-p2)))*sqrt(sigma^2/(n))
print(MDE_fruit)
print(MDE_candy)
MDE_target = 0.25*(1 - (1/6))
samplesize = ((t_alpha - t_q)/MDE_target)^2*((sigma^2)/(p2*(1-p2)))
print(samplesize)
